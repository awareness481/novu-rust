/*
 * Novu API
 *
 * Novu REST API. Please see https://docs.novu.co/api-reference for more details.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@novu.co
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MessageResponseDto {
    #[serde(rename = "_id", skip_serializing_if = "Option::is_none")]
    pub _id: Option<String>,
    #[serde(rename = "_templateId")]
    pub _template_id: String,
    #[serde(rename = "_environmentId")]
    pub _environment_id: String,
    #[serde(rename = "_messageTemplateId")]
    pub _message_template_id: String,
    #[serde(rename = "_organizationId")]
    pub _organization_id: String,
    #[serde(rename = "_notificationId")]
    pub _notification_id: String,
    #[serde(rename = "_subscriberId")]
    pub _subscriber_id: String,
    #[serde(rename = "subscriber", skip_serializing_if = "Option::is_none")]
    pub subscriber: Option<Box<models::SubscriberResponseDto>>,
    #[serde(rename = "template", skip_serializing_if = "Option::is_none")]
    pub template: Option<Box<models::WorkflowResponse>>,
    #[serde(rename = "templateIdentifier", skip_serializing_if = "Option::is_none")]
    pub template_identifier: Option<String>,
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "content")]
    pub content: Box<models::MessageResponseDtoContent>,
    #[serde(rename = "transactionId")]
    pub transaction_id: String,
    #[serde(rename = "subject", skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    #[serde(rename = "channel")]
    pub channel: Channel,
    #[serde(rename = "seen")]
    pub seen: bool,
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "phone", skip_serializing_if = "Option::is_none")]
    pub phone: Option<String>,
    #[serde(rename = "directWebhookUrl", skip_serializing_if = "Option::is_none")]
    pub direct_webhook_url: Option<String>,
    #[serde(rename = "providerId", skip_serializing_if = "Option::is_none")]
    pub provider_id: Option<String>,
    #[serde(rename = "deviceTokens", skip_serializing_if = "Option::is_none")]
    pub device_tokens: Option<Vec<String>>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "lastSeenDate")]
    pub last_seen_date: String,
    #[serde(rename = "cta")]
    pub cta: Box<models::MessageCta>,
    #[serde(rename = "_feedId", skip_serializing_if = "Option::is_none")]
    pub _feed_id: Option<String>,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "errorId")]
    pub error_id: String,
    #[serde(rename = "errorText")]
    pub error_text: String,
    /// The payload that was used to send the notification trigger
    #[serde(rename = "payload")]
    pub payload: serde_json::Value,
    /// Provider specific overrides used when triggering the notification
    #[serde(rename = "overrides")]
    pub overrides: serde_json::Value,
}

impl MessageResponseDto {
    pub fn new(_template_id: String, _environment_id: String, _message_template_id: String, _organization_id: String, _notification_id: String, _subscriber_id: String, content: models::MessageResponseDtoContent, transaction_id: String, channel: Channel, seen: bool, last_seen_date: String, cta: models::MessageCta, status: Status, error_id: String, error_text: String, payload: serde_json::Value, overrides: serde_json::Value) -> MessageResponseDto {
        MessageResponseDto {
            _id: None,
            _template_id,
            _environment_id,
            _message_template_id,
            _organization_id,
            _notification_id,
            _subscriber_id,
            subscriber: None,
            template: None,
            template_identifier: None,
            created_at: None,
            content: Box::new(content),
            transaction_id,
            subject: None,
            channel,
            seen,
            email: None,
            phone: None,
            direct_webhook_url: None,
            provider_id: None,
            device_tokens: None,
            title: None,
            last_seen_date,
            cta: Box::new(cta),
            _feed_id: None,
            status,
            error_id,
            error_text,
            payload,
            overrides,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Channel {
    #[serde(rename = "in_app")]
    InApp,
    #[serde(rename = "email")]
    Email,
    #[serde(rename = "sms")]
    Sms,
    #[serde(rename = "chat")]
    Chat,
    #[serde(rename = "push")]
    Push,
}

impl Default for Channel {
    fn default() -> Channel {
        Self::InApp
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "sent")]
    Sent,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "warning")]
    Warning,
}

impl Default for Status {
    fn default() -> Status {
        Self::Sent
    }
}

