/*
 * Novu API
 *
 * Novu REST API. Please see https://docs.novu.co/api-reference for more details.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@novu.co
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ActivityNotificationExecutionDetailResponseDto {
    #[serde(rename = "_id")]
    pub _id: String,
    #[serde(rename = "_jobId")]
    pub _job_id: String,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "detail")]
    pub detail: String,
    #[serde(rename = "isRetry")]
    pub is_retry: bool,
    #[serde(rename = "isTest")]
    pub is_test: bool,
    #[serde(rename = "providerId")]
    pub provider_id: serde_json::Value,
    #[serde(rename = "raw", skip_serializing_if = "Option::is_none")]
    pub raw: Option<String>,
    #[serde(rename = "source")]
    pub source: Source,
}

impl ActivityNotificationExecutionDetailResponseDto {
    pub fn new(_id: String, _job_id: String, status: Status, detail: String, is_retry: bool, is_test: bool, provider_id: serde_json::Value, source: Source) -> ActivityNotificationExecutionDetailResponseDto {
        ActivityNotificationExecutionDetailResponseDto {
            _id,
            _job_id,
            status,
            detail,
            is_retry,
            is_test,
            provider_id,
            raw: None,
            source,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "Success")]
    Success,
    #[serde(rename = "Warning")]
    Warning,
    #[serde(rename = "Failed")]
    Failed,
    #[serde(rename = "Pending")]
    Pending,
    #[serde(rename = "Queued")]
    Queued,
    #[serde(rename = "ReadConfirmation")]
    ReadConfirmation,
}

impl Default for Status {
    fn default() -> Status {
        Self::Success
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Source {
    #[serde(rename = "Credentials")]
    Credentials,
    #[serde(rename = "Internal")]
    Internal,
    #[serde(rename = "Payload")]
    Payload,
    #[serde(rename = "Webhook")]
    Webhook,
}

impl Default for Source {
    fn default() -> Source {
        Self::Credentials
    }
}

