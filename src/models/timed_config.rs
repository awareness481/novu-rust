/*
 * Novu API
 *
 * Novu REST API. Please see https://docs.novu.co/api-reference for more details.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@novu.co
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimedConfig {
    #[serde(rename = "atTime", skip_serializing_if = "Option::is_none")]
    pub at_time: Option<String>,
    #[serde(rename = "weekDays", skip_serializing_if = "Option::is_none")]
    pub week_days: Option<Vec<WeekDays>>,
    #[serde(rename = "monthDays", skip_serializing_if = "Option::is_none")]
    pub month_days: Option<Vec<String>>,
    #[serde(rename = "ordinal", skip_serializing_if = "Option::is_none")]
    pub ordinal: Option<Ordinal>,
    #[serde(rename = "ordinalValue", skip_serializing_if = "Option::is_none")]
    pub ordinal_value: Option<OrdinalValue>,
    #[serde(rename = "monthlyType", skip_serializing_if = "Option::is_none")]
    pub monthly_type: Option<MonthlyType>,
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum WeekDays {
    #[serde(rename = "monday")]
    Monday,
    #[serde(rename = "tuesday")]
    Tuesday,
    #[serde(rename = "wednesday")]
    Wednesday,
    #[serde(rename = "thursday")]
    Thursday,
    #[serde(rename = "friday")]
    Friday,
    #[serde(rename = "saturday")]
    Saturday,
    #[serde(rename = "sunday")]
    Sunday,
}

impl Default for WeekDays {
    fn default() -> WeekDays {
        Self::Monday
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Ordinal {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
    #[serde(rename = "3")]
    Variant3,
    #[serde(rename = "4")]
    Variant4,
    #[serde(rename = "5")]
    Variant5,
    #[serde(rename = "last")]
    Last,
}

impl Default for Ordinal {
    fn default() -> Ordinal {
        Self::Variant1
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrdinalValue {
    #[serde(rename = "day")]
    Day,
    #[serde(rename = "weekday")]
    Weekday,
    #[serde(rename = "weekend")]
    Weekend,
    #[serde(rename = "sunday")]
    Sunday,
    #[serde(rename = "monday")]
    Monday,
    #[serde(rename = "tuesday")]
    Tuesday,
    #[serde(rename = "wednesday")]
    Wednesday,
    #[serde(rename = "thursday")]
    Thursday,
    #[serde(rename = "friday")]
    Friday,
    #[serde(rename = "saturday")]
    Saturday,
}

impl Default for OrdinalValue {
    fn default() -> OrdinalValue {
        Self::Day
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MonthlyType {
    #[serde(rename = "each")]
    Each,
    #[serde(rename = "on")]
    On,
}

impl Default for MonthlyType {
    fn default() -> MonthlyType {
        Self::Each
    }
}
