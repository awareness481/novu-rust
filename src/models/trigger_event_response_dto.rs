/*
 * Novu API
 *
 * Novu REST API. Please see https://docs.novu.co/api-reference for more details.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@novu.co
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TriggerEventResponseDto {
    /// If trigger was acknowledged or not
    #[serde(rename = "acknowledged")]
    pub acknowledged: bool,
    /// Status for trigger
    #[serde(rename = "status")]
    pub status: Status,
    /// In case of an error, this field will contain the error message
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<Vec<String>>,
    /// Transaction id for trigger
    #[serde(rename = "transactionId", skip_serializing_if = "Option::is_none")]
    pub transaction_id: Option<String>,
}

/// Status for trigger
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "trigger_not_active")]
    TriggerNotActive,
    #[serde(rename = "no_workflow_active_steps_defined")]
    NoWorkflowActiveStepsDefined,
    #[serde(rename = "no_workflow_steps_defined")]
    NoWorkflowStepsDefined,
    #[serde(rename = "processed")]
    Processed,
    #[serde(rename = "subscriber_id_missing")]
    SubscriberIdMissing,
    #[serde(rename = "no_tenant_found")]
    NoTenantFound,
}

impl Default for Status {
    fn default() -> Status {
        Self::Error
    }
}
