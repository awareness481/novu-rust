/*
 * Novu API
 *
 * Novu REST API. Please see https://docs.novu.co/api-reference for more details.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@novu.co
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ActivityNotificationResponseDto {
    #[serde(rename = "_id", skip_serializing_if = "Option::is_none")]
    pub _id: Option<String>,
    #[serde(rename = "_environmentId")]
    pub _environment_id: String,
    #[serde(rename = "_organizationId")]
    pub _organization_id: String,
    #[serde(rename = "transactionId")]
    pub transaction_id: String,
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "channels", skip_serializing_if = "Option::is_none")]
    pub channels: Option<Vec<Channels>>,
    #[serde(rename = "subscriber", skip_serializing_if = "Option::is_none")]
    pub subscriber: Option<Box<models::ActivityNotificationSubscriberResponseDto>>,
    #[serde(rename = "template", skip_serializing_if = "Option::is_none")]
    pub template: Option<Box<models::ActivityNotificationTemplateResponseDto>>,
    #[serde(rename = "jobs", skip_serializing_if = "Option::is_none")]
    pub jobs: Option<Vec<models::ActivityNotificationJobResponseDto>>,
}

impl ActivityNotificationResponseDto {
    pub fn new(_environment_id: String, _organization_id: String, transaction_id: String) -> ActivityNotificationResponseDto {
        ActivityNotificationResponseDto {
            _id: None,
            _environment_id,
            _organization_id,
            transaction_id,
            created_at: None,
            channels: None,
            subscriber: None,
            template: None,
            jobs: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Channels {
    #[serde(rename = "in_app")]
    InApp,
    #[serde(rename = "email")]
    Email,
    #[serde(rename = "sms")]
    Sms,
    #[serde(rename = "chat")]
    Chat,
    #[serde(rename = "push")]
    Push,
    #[serde(rename = "digest")]
    Digest,
    #[serde(rename = "trigger")]
    Trigger,
    #[serde(rename = "delay")]
    Delay,
    #[serde(rename = "custom")]
    Custom,
}

impl Default for Channels {
    fn default() -> Channels {
        Self::InApp
    }
}

