/*
 * Novu API
 *
 * Novu REST API. Please see https://docs.novu.co/api-reference for more details.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@novu.co
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChannelSettings {
    /// The provider identifier for the credentials
    #[serde(rename = "providerId")]
    pub provider_id: ProviderId,
    /// The integration identifier
    #[serde(rename = "integrationIdentifier", skip_serializing_if = "Option::is_none")]
    pub integration_identifier: Option<String>,
    /// Credentials payload for the specified provider
    #[serde(rename = "credentials")]
    pub credentials: Box<models::ChannelCredentials>,
    /// Id of the integration that is used for this channel
    #[serde(rename = "_integrationId")]
    pub _integration_id: String,
}

impl ChannelSettings {
    pub fn new(provider_id: ProviderId, credentials: models::ChannelCredentials, _integration_id: String) -> ChannelSettings {
        ChannelSettings {
            provider_id,
            integration_identifier: None,
            credentials: Box::new(credentials),
            _integration_id,
        }
    }
}
/// The provider identifier for the credentials
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProviderId {
    #[serde(rename = "slack")]
    Slack,
    #[serde(rename = "discord")]
    Discord,
    #[serde(rename = "msteams")]
    Msteams,
    #[serde(rename = "mattermost")]
    Mattermost,
    #[serde(rename = "ryver")]
    Ryver,
    #[serde(rename = "zulip")]
    Zulip,
    #[serde(rename = "grafana-on-call")]
    GrafanaOnCall,
    #[serde(rename = "getstream")]
    Getstream,
    #[serde(rename = "rocket-chat")]
    RocketChat,
    #[serde(rename = "whatsapp-business")]
    WhatsappBusiness,
    #[serde(rename = "fcm")]
    Fcm,
    #[serde(rename = "apns")]
    Apns,
    #[serde(rename = "expo")]
    Expo,
    #[serde(rename = "one-signal")]
    OneSignal,
    #[serde(rename = "pushpad")]
    Pushpad,
    #[serde(rename = "push-webhook")]
    PushWebhook,
    #[serde(rename = "pusher-beams")]
    PusherBeams,
}

impl Default for ProviderId {
    fn default() -> ProviderId {
        Self::Slack
    }
}

